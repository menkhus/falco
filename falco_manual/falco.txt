NAME
falco - 3rd party code security intelligence for software maintainers

SYNOPSIS
usage: falco [-h] [-b] [-c] [-C [CVE]] [-d [CVEDB_DATABASE]]
             [-f [PACKAGELISTFILE]] [-i [ITEMS_REPORTED]] [-n [PACKAGE_NAME]]
             [-o [OUTPUTFILE]] [-t [TYPE]] [-m [MINIMUM_DATE]] [-u]
             [-v [PACKAGE_VERSION]] [-V]

Checks command line or, a file list of software programs for known security
defects documented in the National Vulnerability Database. Matches a project
name and version name to CPE URIs in the NVD database. Uses the Copyright
2013, nvd2sqlite3 app, thanks to: Jan Schaumann for
https://github.com/jschauma/nvd2sqlite3

optional arguments:
  -h, --help            show this help message and exit
  -b, --build_environment
                        for use in build environments, return fail if items
                        found
  -c, --config          update database and setup for use. Do this after
                        manually downloading a new database
  -C [CVE], --CVE [CVE]
                        display a CVE entry
  -d [CVEDB_DATABASE], --cvedb_database [CVEDB_DATABASE]
                        location of the cvedb sqlite database
  -f [PACKAGELISTFILE], --packagelistfile [PACKAGELISTFILE]
                        file where the list of packages to evaluate is stored
  -i [ITEMS_REPORTED], --items_reported [ITEMS_REPORTED]
                        number of items reported for NVD/CVE matches
  -n [PACKAGE_NAME], --package_name [PACKAGE_NAME]
                        package name to search for
  -o [OUTPUTFILE], --outputfile [OUTPUTFILE]
                        name of output file
  -t [TYPE], --type [TYPE]
                        format of output, options are text, html, json
  -m [MINIMUM_DATE], --minimum_date [MINIMUM_DATE]
                        the minimum date we look for in the database for
                        matches, default is the beginning of the data.
                        format is like 2003-11-17
  -u, --update          download database. Do this about once a week
  -v [PACKAGE_VERSION], --package_version [PACKAGE_VERSION]
                        package version to look for
  -V, --Version         report the version of falco and exit
DEPENDENCIES
  falco uses the cvedb sqlite database.  To initialize the
  database or to update the database use:
  $ falco -u

EXAMPLE
  Use falco to look for vulnerability for http_server in NVD:
    $ falco -n http_server
*** Potential security defect found in http_server:
CVE: CVE-2016-5387
CVSS Score: 5.1
Vulnerable software list, CPE id: [u'cpe:/a:apache:http_server:2.4.23']
Published on: 2016-07-18T22:00:19.837-04:00
Summary Description: The Apache HTTP Server through 2.4.23 follows RFC 3875 section 4.1.18 and therefore does not protect applications from the presence of untrusted client data in the HTTP_PROXY environment variable, which might allow remote attackers to redirect an application's outbound HTTP traffic to an arbitrary proxy server via a crafted Proxy header in an HTTP request, aka an "httpoxy" issue.  NOTE: the vendor states "This mitigation has been assigned the identifier CVE-2016-5387"; in other words, this is not a CVE ID for a vulnerability.

HINTS
  falco uses the nvd database. The database is updated every day 
  or two. Update this database in a cron job. with the -u.

  To regularly search for a group of libraries, apps and operating systems, put
  the information in a watchfile and run falco -f watchfile. The format of each watch item in the file is packagename:version .

  If you are doing regular software builds, for example using make, you can use falco with the the -b option. If falco finds a match, it will return an error, the make will exit, and you will have to determine whether the bug reported has a security impact on your project and if you need to update to that newer package.

  Getting aquinted with packagenames as used in NVD CVE
    falco is only as good as the package name and version information you give it. Start by just using falco -n to see if you are using the correct name. You can also search the vfeed.db database using the toolswatch vfeedcli or sqlite to see how you need to name your package name to be compatible with the CPE names used in the database. To examine the CPE dictionary look at:
        https://nvd.nist.gov/cpe.cfm

SEE ALSO
    https://github.com/menkhus/falco

BUGS
    Searching for package names and versions can lead to both false positives and false negatives. The CPE matching documentation specifies greater than and less than logic. falco and other tools use regex matches and the fact that the NVD data provides an intended comprehensive list of impacted versions for each CVE number.

AUTHORS
    Mark Menkhus <mark.menkhus@gmail.com>

LICENSE
    (c) Copyright Falconry Concepts LLC.

    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

VERSION
    0.7.alpha

THANKS
  Jan Schaumann, twitter for https://github.com/jschauma/nvd2sqlite3
  NJ Ouchn, vfeed database, awesome tool!
