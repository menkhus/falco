#!/usr/bin/env python
# Copyright (C) 2016 ToolsWatch.org
# This file is part of vFeed Correlated Threat & Vulnerability Community Database API Parser - http://www.toolswatch.org
# See the file 'LICENSE' for copying permission.


import json
from config.constants import edb_url
from lib.common.database import Database


class CveExploit(object):
    def __init__(self, cve):
        self.cve = cve.upper()
        (self.cur, self.query) = Database(self.cve).db_init()
        self.data = Database(self.cve, self.cur, self.query).check_cve()

    def get_msf(self):
        """ Metasploit method
        :return: JSON response with Msf ID, file and title
        """
        self.msf = []
        self.cur.execute(
            'SELECT * FROM map_cve_msf WHERE cveid=?', self.query)

        for self.data in self.cur.fetchall():
            item = {'id': self.data[0], 'file': self.data[1], 'title': self.data[2]}
            self.msf.append(item)

        return json.dumps(self.msf, indent=4, sort_keys=True)

    def get_saint(self):
        """ Saint  method
        :return: JSON response with Saint ID, file and title
        """
        self.saint = []
        self.cur.execute(
            'SELECT * FROM map_cve_saint WHERE cveid=?', self.query)

        for self.data in self.cur.fetchall():
            item = {'id': self.data[0], 'title': self.data[1], 'url': self.data[2]}
            self.saint.append(item)

        return json.dumps(self.saint, indent=4, sort_keys=True)

    def get_edb(self):
        """ Exploit Database  method
        :return: JSON response with EDB ID, file and url
        """
        self.edb = []
        self.cur.execute(
            'SELECT * FROM map_cve_exploitdb WHERE cveid=?', self.query)

        for self.data in self.cur.fetchall():
            item = {'id': self.data[0], 'file': self.data[1], 'url': edb_url + str(self.data[0])}
            self.edb.append(item)
        return json.dumps(self.edb, indent=4, sort_keys=True)

    def get_d2(self):
        """ D2 elliot  method
        :return: JSON response with D2 Elliot title and file
        """
        self.d2 = []
        self.cur.execute(
            'SELECT * FROM map_cve_d2 WHERE cveid=?', self.query)

        for self.data in self.cur.fetchall():
            item = {'title': self.data[0], 'url': self.data[1]}
            self.d2.append(item)
        return json.dumps(self.d2, indent=4, sort_keys=True)

    def get_milw0rm(self):
        """ Milw0rm  method
        :return: Nothing
        """
        return "[!] Milw0rm method is deprecated as the source does not longer exist."
